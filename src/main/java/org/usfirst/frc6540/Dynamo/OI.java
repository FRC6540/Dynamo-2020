// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6540.Dynamo;

import org.usfirst.frc6540.Dynamo.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6540.Dynamo.subsystems.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton a;
	public JoystickButton b;
	public JoystickButton x;
	public JoystickButton y;
	// public JoystickButton right;
	public Joystick xbox;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		xbox = new Joystick(0);

		y = new JoystickButton(xbox, 3);
		y.whenPressed(new ExtendVPiston());
		x = new JoystickButton(xbox, 2);
		x.whenPressed(new RetractHPiston());
		b = new JoystickButton(xbox, 1);
		b.whenPressed(new ExtendHPiston());
		a = new JoystickButton(xbox, 0);
		a.whenPressed(new RetractVPiston());

		// SmartDashboard Buttons
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
		SmartDashboard.putData("Forward", new Forward());
		SmartDashboard.putData("Extend VPiston", new ExtendVPiston());
		SmartDashboard.putData("Extend HPiston", new ExtendHPiston());
		SmartDashboard.putData("Auto Section", new AutoSection());
		SmartDashboard.putData("Retract VPiston", new RetractVPiston());
		SmartDashboard.putData("Retract HPiston", new RetractHPiston());
		SmartDashboard.putNumber("Speed", getForward());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// right = new JoystickButton(xbox, 6);
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getxbox() {
		return xbox;
	}

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public double getForward() {
		double R_trigger = xbox.getRawAxis(3);
		double L_trigger = -xbox.getRawAxis(2);
		double trigger_speedBF = R_trigger + L_trigger;
		if (isR()){
			return -trigger_speedBF;
		}
		return -0.5 * trigger_speedBF;
	}

	public double getRotation() {
		double speedLR = xbox.getRawAxis(0);
		return speedLR;
	}
	public Boolean isR() {
		return xbox.getRawButton(6);
	}
}
