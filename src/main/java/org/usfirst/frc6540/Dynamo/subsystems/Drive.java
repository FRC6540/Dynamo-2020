// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6540.Dynamo.subsystems;

import org.usfirst.frc6540.Dynamo.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drive extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark right;
    private Spark left;
    private DifferentialDrive wheels;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public Drive() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        right = new Spark(9);
        addChild("Right",right);
        right.setInverted(false);
        
        left = new Spark(8);
        addChild("Left",left);
        left.setInverted(false);
        
        wheels = new DifferentialDrive(right, left);
        addChild("Wheels",wheels);
        wheels.setSafetyEnabled(true);
        wheels.setExpiration(0.1);
        wheels.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	public String mode = "arcade";

	public void forward(float straight, float turn) {
		SmartDashboard.putNumber("Acceleration", straight);
		SmartDashboard.putNumber("Turn", turn);
		switch (mode) {
		case "arcade":
			wheels.arcadeDrive(straight, turn);
			break;
		case "tank":
			wheels.tankDrive(straight, turn);
			break;
		case "curvature":
			wheels.curvatureDrive(straight, turn, true);
			break;
		default:
			break;
		}
		// wheels.arcadeDrive(straight, turn);
	}

	public void reset() {
		wheels.arcadeDrive(0.0, 0.0);
	}

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		setDefaultCommand(new Forward());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loops
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

}
